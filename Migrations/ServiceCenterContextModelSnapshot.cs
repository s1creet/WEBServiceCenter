// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceCenter.Data;

namespace ServiceCenter.Migrations
{
    [DbContext(typeof(ServiceCenterContext))]
    partial class ServiceCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ServiceCenter.Models.ВидыНеисправностей", b =>
                {
                    b.Property<int>("КодВида")
                        .HasColumnType("INT")
                        .HasColumnName("Код_вида");

                    b.Property<int>("Запчасть2кодЗапчасти")
                        .HasColumnType("INT")
                        .HasColumnName("Запчасть_2Код_запчасти");

                    b.Property<int>("Запчасть3кодЗапчасти")
                        .HasColumnType("INT")
                        .HasColumnName("Запчасть_3Код_запчасти");

                    b.Property<int>("КодЗапчасти")
                        .HasColumnType("INT")
                        .HasColumnName("Код_запчасти");

                    b.Property<int>("КодМодели")
                        .HasColumnType("INT")
                        .HasColumnName("Код_модели");

                    b.Property<int>("МетодыРемонта")
                        .HasColumnType("INT")
                        .HasColumnName("Методы_ремонта");

                    b.Property<int>("Описание")
                        .HasColumnType("INT");

                    b.Property<int>("Симптомы")
                        .HasColumnType("INT");

                    b.Property<int>("ЦенаРаботы")
                        .HasColumnType("INT")
                        .HasColumnName("Цена_работы");

                    b.HasKey("КодВида");

                    b.HasIndex("Запчасть2кодЗапчасти");

                    b.HasIndex("Запчасть3кодЗапчасти");

                    b.HasIndex("КодЗапчасти");

                    b.HasIndex("КодМодели");

                    b.ToTable("Виды_неисправностей");
                });

            modelBuilder.Entity("ServiceCenter.Models.Должности", b =>
                {
                    b.Property<int>("КодДолжности")
                        .HasColumnType("INT")
                        .HasColumnName("Код_должности");

                    b.Property<int>("НаименованиеДолжности")
                        .HasColumnType("INT")
                        .HasColumnName("Наименование_должности");

                    b.Property<int>("Обязанности")
                        .HasColumnType("INT");

                    b.Property<int>("Оклад")
                        .HasColumnType("INT");

                    b.Property<int>("Требования")
                        .HasColumnType("INT");

                    b.HasKey("КодДолжности");

                    b.ToTable("Должности");
                });

            modelBuilder.Entity("ServiceCenter.Models.Заказы", b =>
                {
                    b.Property<int>("ЗаказыId")
                        .HasColumnType("INT")
                        .HasColumnName("Заказы_ID");

                    b.Property<int>("ДатаВозврата")
                        .HasColumnType("INT")
                        .HasColumnName("Дата_возврата");

                    b.Property<int>("ДатаЗаказа")
                        .HasColumnType("INT")
                        .HasColumnName("Дата_заказа");

                    b.Property<int>("КодВида")
                        .HasColumnType("INT")
                        .HasColumnName("Код_вида");

                    b.Property<int>("КодВидаНеисправности")
                        .HasColumnType("INT")
                        .HasColumnName("Код_вида_неисправности");

                    b.Property<int>("КодМагазина")
                        .HasColumnType("INT")
                        .HasColumnName("Код_магазина");

                    b.Property<int>("КодСотрудника")
                        .HasColumnType("INT")
                        .HasColumnName("Код_сотрудника");

                    b.Property<int>("ОтметкаОГарантии")
                        .HasColumnType("INT")
                        .HasColumnName("Отметка_о_гарантии");

                    b.Property<int>("СерийныеНомер")
                        .HasColumnType("INT")
                        .HasColumnName("Серийные_номер");

                    b.Property<int>("СкорГарантииРемонта")
                        .HasColumnType("INT")
                        .HasColumnName("Скор_гарантии_ремонта");

                    b.Property<int>("ФиоЗаказчика")
                        .HasColumnType("INT")
                        .HasColumnName("ФИО_заказчика");

                    b.Property<int>("Цена")
                        .HasColumnType("INT");

                    b.HasKey("ЗаказыId");

                    b.HasIndex("КодВида");

                    b.HasIndex("КодМагазина");

                    b.HasIndex("КодСотрудника");

                    b.ToTable("Заказы");
                });

            modelBuilder.Entity("ServiceCenter.Models.Запчасти", b =>
                {
                    b.Property<int>("КодЗапчасти")
                        .HasColumnType("INT")
                        .HasColumnName("Код_запчасти");

                    b.Property<int>("Наименования")
                        .HasColumnType("INT");

                    b.Property<int>("Функции")
                        .HasColumnType("INT");

                    b.Property<int>("Цена")
                        .HasColumnType("INT");

                    b.HasKey("КодЗапчасти");

                    b.ToTable("Запчасти");
                });

            modelBuilder.Entity("ServiceCenter.Models.ОбслуживаемыеМагазины", b =>
                {
                    b.Property<int>("КодМагазина")
                        .HasColumnType("INT")
                        .HasColumnName("Код_магазина");

                    b.Property<int>("Адрес")
                        .HasColumnType("INT");

                    b.Property<int>("Наименование")
                        .HasColumnType("INT");

                    b.Property<int>("Телефон")
                        .HasColumnType("INT");

                    b.HasKey("КодМагазина");

                    b.ToTable("Обслуживаемые_магазины");
                });

            modelBuilder.Entity("ServiceCenter.Models.РемонтируемыеМодели", b =>
                {
                    b.Property<int>("КодМодели")
                        .HasColumnType("INT")
                        .HasColumnName("Код_модели");

                    b.Property<int>("Наименование")
                        .HasColumnType("INT");

                    b.Property<int>("Особенности")
                        .HasColumnType("INT");

                    b.Property<int>("Производитель")
                        .HasColumnType("INT");

                    b.Property<int>("ТехническиеХарантеристики")
                        .HasColumnType("INT")
                        .HasColumnName("Технические_харантеристики");

                    b.Property<int>("Тип")
                        .HasColumnType("INT");

                    b.HasKey("КодМодели");

                    b.ToTable("Ремонтируемые_модели");
                });

            modelBuilder.Entity("ServiceCenter.Models.Сотрудники", b =>
                {
                    b.Property<int>("КодСотрудника")
                        .HasColumnType("INT")
                        .HasColumnName("Код_сотрудника");

                    b.Property<int>("Адрес")
                        .HasColumnType("INT");

                    b.Property<int>("КодДолжности")
                        .HasColumnType("INT")
                        .HasColumnName("Код_должности");

                    b.Property<int>("ПаспортныеДанные")
                        .HasColumnType("INT")
                        .HasColumnName("Паспортные_данные");

                    b.Property<int>("Пол")
                        .HasColumnType("INT");

                    b.Property<int>("Телефон")
                        .HasColumnType("INT");

                    b.HasKey("КодСотрудника");

                    b.HasIndex("КодДолжности");

                    b.ToTable("Сотрудники");
                });

            modelBuilder.Entity("ServiceCenter.Models.ВидыНеисправностей", b =>
                {
                    b.HasOne("ServiceCenter.Models.Запчасти", "Запчасть2кодЗапчастиNavigation")
                        .WithMany("ВидыНеисправностейЗапчасть2кодЗапчастиNavigations")
                        .HasForeignKey("Запчасть2кодЗапчасти")
                        .IsRequired();

                    b.HasOne("ServiceCenter.Models.Запчасти", "Запчасть3кодЗапчастиNavigation")
                        .WithMany("ВидыНеисправностейЗапчасть3кодЗапчастиNavigations")
                        .HasForeignKey("Запчасть3кодЗапчасти")
                        .IsRequired();

                    b.HasOne("ServiceCenter.Models.Запчасти", "КодЗапчастиNavigation")
                        .WithMany("ВидыНеисправностейКодЗапчастиNavigations")
                        .HasForeignKey("КодЗапчасти")
                        .IsRequired();

                    b.HasOne("ServiceCenter.Models.РемонтируемыеМодели", "КодМоделиNavigation")
                        .WithMany("ВидыНеисправностейs")
                        .HasForeignKey("КодМодели")
                        .IsRequired();

                    b.Navigation("Запчасть2кодЗапчастиNavigation");

                    b.Navigation("Запчасть3кодЗапчастиNavigation");

                    b.Navigation("КодЗапчастиNavigation");

                    b.Navigation("КодМоделиNavigation");
                });

            modelBuilder.Entity("ServiceCenter.Models.Заказы", b =>
                {
                    b.HasOne("ServiceCenter.Models.ВидыНеисправностей", "КодВидаNavigation")
                        .WithMany("Заказыs")
                        .HasForeignKey("КодВида")
                        .IsRequired();

                    b.HasOne("ServiceCenter.Models.ОбслуживаемыеМагазины", "КодМагазинаNavigation")
                        .WithMany("Заказыs")
                        .HasForeignKey("КодМагазина")
                        .IsRequired();

                    b.HasOne("ServiceCenter.Models.Сотрудники", "КодСотрудникаNavigation")
                        .WithMany("Заказыs")
                        .HasForeignKey("КодСотрудника")
                        .IsRequired();

                    b.Navigation("КодВидаNavigation");

                    b.Navigation("КодМагазинаNavigation");

                    b.Navigation("КодСотрудникаNavigation");
                });

            modelBuilder.Entity("ServiceCenter.Models.Сотрудники", b =>
                {
                    b.HasOne("ServiceCenter.Models.Должности", "КодДолжностиNavigation")
                        .WithMany("Сотрудникиs")
                        .HasForeignKey("КодДолжности")
                        .IsRequired();

                    b.Navigation("КодДолжностиNavigation");
                });

            modelBuilder.Entity("ServiceCenter.Models.ВидыНеисправностей", b =>
                {
                    b.Navigation("Заказыs");
                });

            modelBuilder.Entity("ServiceCenter.Models.Должности", b =>
                {
                    b.Navigation("Сотрудникиs");
                });

            modelBuilder.Entity("ServiceCenter.Models.Запчасти", b =>
                {
                    b.Navigation("ВидыНеисправностейЗапчасть2кодЗапчастиNavigations");

                    b.Navigation("ВидыНеисправностейЗапчасть3кодЗапчастиNavigations");

                    b.Navigation("ВидыНеисправностейКодЗапчастиNavigations");
                });

            modelBuilder.Entity("ServiceCenter.Models.ОбслуживаемыеМагазины", b =>
                {
                    b.Navigation("Заказыs");
                });

            modelBuilder.Entity("ServiceCenter.Models.РемонтируемыеМодели", b =>
                {
                    b.Navigation("ВидыНеисправностейs");
                });

            modelBuilder.Entity("ServiceCenter.Models.Сотрудники", b =>
                {
                    b.Navigation("Заказыs");
                });
#pragma warning restore 612, 618
        }
    }
}
